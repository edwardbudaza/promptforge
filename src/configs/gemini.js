import { GoogleGenerativeAI } from '@google/generative-ai';

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: 'gemini-2.0-flash-exp',
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: 'text/plain',
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: 'application/json',
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: 'user',
      parts: [
        {
          text: 'Generate a TODO APP: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n  ',
        },
      ],
    },
    {
      role: 'model',
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "React Todo App",\n  "explanation": "This is a React-based Todo application, created using Vite, styled with Tailwind CSS, and incorporating icons from the lucide-react library. The application allows users to add, edit, delete, and mark tasks as complete. The project is organized into components to keep the code modular and maintainable, including a TodoList, TodoForm, and TodoItem components. It provides a simple yet functional interface for managing personal tasks.The project is designed to be beautiful and worthy of production use, using clean UI and functional components.",\n  "files": {\n    "/App.js": {\n      "code": "import React from \'react\';\\nimport TodoList from \'./components/TodoList\';\\nimport {Home} from \'lucide-react\';\\n\\nfunction App() {\\n  return (\\n    <div className=\\"bg-gray-100 min-h-screen flex flex-col\\">\\n      <header className=\\"bg-blue-600 p-4 text-white flex justify-between items-center\\">\\n      <div className=\'flex gap-2 items-center\'>\\n         <Home /> <h1 className=\\"text-xl font-bold\\">My Todo List</h1>\\n         </div>\\n        <div className=\'flex gap-2 items-center\'>\\n\\n        <img src=\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\" alt=\\"user\\" className=\'h-8 w-8 rounded-full border-2 border-white\' />\\n        </div>\\n      </header>\\n      <main className=\\"flex-1 p-6\\">\\n       <TodoList />\\n      </main>\\n\\n      <footer className=\\"bg-gray-200 text-center p-4\\">\\n        <p className=\\"text-gray-600\\">Â© 2024 Todo App</p>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n"\n    },\n    "/components/TodoList.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport TodoForm from \'./TodoForm\';\\nimport TodoItem from \'./TodoItem\';\\n\\nfunction TodoList() {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem(\'todos\');\\n    return savedTodos ? JSON.parse(savedTodos) : [];\\n  });\\n  const [filter, setFilter] = useState(\'all\');\\n\\n\\n  useEffect(() => {\\n    localStorage.setItem(\'todos\', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (todoText) => {\\n    setTodos([...todos, { id: Date.now(), text: todoText, completed: false }]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, completed: !todo.completed } : todo));\\n  };\\n\\n    const deleteTodo = (id) => {\\n      setTodos(todos.filter(todo => todo.id !== id));\\n    };\\n  \\n  const editTodo = (id, newText) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, text: newText } : todo));\\n  };\\n\\n  const filteredTodos = () => {\\n    switch (filter) {\\n      case \'completed\':\\n        return todos.filter(todo => todo.completed);\\n      case \'incomplete\':\\n        return todos.filter(todo => !todo.completed);\\n      default:\\n        return todos;\\n    }\\n  };\\n\\n  return (\\n    <div className=\\"max-w-2xl mx-auto\\">\\n      <TodoForm onAdd={addTodo} />\\n      <div className=\'my-4 flex justify-between gap-2\'>\\n        <select value={filter} onChange={(e) => setFilter(e.target.value)} className=\'border p-2 rounded\'>\\n          <option value=\\"all\\">All</option>\\n          <option value=\\"completed\\">Completed</option>\\n          <option value=\\"incomplete\\">Incomplete</option>\\n        </select>\\n        <span className=\'text-gray-600 text-sm font-semibold\'>{filteredTodos().length} Tasks</span>\\n      </div>\\n      <ul className=\\"space-y-2\\">\\n        {filteredTodos().map(todo => (\\n          <TodoItem key={todo.id} todo={todo}  onToggle={() => toggleComplete(todo.id)} onDelete={() => deleteTodo(todo.id)} onEdit={editTodo} />\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\\nexport default TodoList;\\n"\n    },\n    "/components/TodoForm.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Plus } from \'lucide-react\';\\n\\nfunction TodoForm({ onAdd }) {\\n  const [text, setText] = useState(\'\');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim()) {\\n      onAdd(text);\\n      setText(\'\');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"flex items-center\\">\\n      <input\\n        type=\\"text\\"\\n        placeholder=\\"Add a new todo... ðŸš€\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n        className=\\"flex-1 p-3 border rounded-l-md focus:outline-none focus:ring focus:border-blue-300\\"\\n      />\\n      <button type=\\"submit\\" className=\\"bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-r-md focus:outline-none\\">\\n        <Plus />\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default TodoForm;\\n"\n    },\n     "/components/TodoItem.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Trash, Edit, Check, X } from \'lucide-react\';\\n\\nfunction TodoItem({ todo, onToggle, onDelete, onEdit }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n\\n  const handleEdit = () => {\\n    if (isEditing && editText.trim()) {\\n      onEdit(todo.id, editText);\\n    }\\n    setIsEditing(!isEditing);\\n  };\\n\\n  return (\\n    <li className=\\"bg-white p-4 rounded shadow flex items-center justify-between\\">\\n      <div className=\'flex gap-2 items-center\'>\\n\\n         <input type=\\"checkbox\\" checked={todo.completed} onChange={onToggle} className=\'mr-2\'/>\\n           {isEditing ? (\\n              <input\\n              type=\\"text\\"\\n              value={editText}\\n               onChange={(e) => setEditText(e.target.value)}\\n               className=\'border p-1 rounded\'\\n              />\\n             ) : (\\n               <span className={`${todo.completed ? \'line-through text-gray-500\' : \'text-gray-800\'}`}>\\n                {todo.text}\\n                </span>\\n             )}\\n          </div>\\n      <div className=\\"flex items-center gap-2\\">\\n      {isEditing ? <button onClick={handleEdit} className=\'text-green-500\'><Check /></button>:<button  onClick={handleEdit} className=\'text-blue-500\'><Edit /></button>}\\n\\n        <button onClick={onDelete} className=\'text-red-500\'><Trash /></button>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\\n"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/TodoList.js",\n    "/components/TodoForm.js",\n    "/components/TodoItem.js"\n   ]\n}\n```\n',
        },
      ],
    },
  ],
});

// const result = await chatSession.sendMessage('INSERT_INPUT_HERE');
// console.log(result.response.text());
